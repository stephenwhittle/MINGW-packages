diff --git a/aclocal.m4 b/aclocal.m4
index f11bc7ed7d..91322f1a0c 100644
--- a/aclocal.m4
+++ b/aclocal.m4
@@ -36,5 +36,10 @@ AC_DEFUN([TYPE_SOCKLEN_T],
       AC_DEFINE_UNQUOTED(socklen_t, $git_cv_socklen_t_equiv,
 			[type to use in place of socklen_t if not defined])],
       [#include <sys/types.h>
-#include <sys/socket.h>])
+      #ifdef HAVE_SYS_SOCKET_H
+      #include <sys/socket.h>
+      #endif
+      #ifdef HAVE_WS2TCPIP_H
+      #include <ws2tcpip.h>
+      #endif])
 ])
diff --git a/compat/hstrerror.c b/compat/hstrerror.c
index b85a2fa956..c50a1f7cda 100644
--- a/compat/hstrerror.c
+++ b/compat/hstrerror.c
@@ -1,6 +1,10 @@
 #include <string.h>
 #include <stdio.h>
+#ifdef __MINGW64_VERSION_MAJOR
+#include <winsock2.h>
+#else
 #include <netdb.h>
+#endif
 
 const char *githstrerror(int err)
 {
diff --git a/compat/mingw.c b/compat/mingw.c
index 8b6fa0db44..87cfae718d 100644
--- a/compat/mingw.c
+++ b/compat/mingw.c
@@ -822,14 +822,14 @@ int pipe(int filedes[2])
 	}
 	return 0;
 }
-
+#ifndef __MINGW64_VERSION_MAJOR
 struct tm *gmtime_r(const time_t *timep, struct tm *result)
 {
 	/* gmtime() in MSVCRT.DLL is thread-safe, but not reentrant */
 	memcpy(result, gmtime(timep), sizeof(struct tm));
 	return result;
 }
-
+#endif
 struct tm *localtime_r(const time_t *timep, struct tm *result)
 {
 	/* localtime() in MSVCRT.DLL is thread-safe, but not reentrant */
diff --git a/compat/mingw.h b/compat/mingw.h
index e03aecfe2e..e1f7fc56d7 100644
--- a/compat/mingw.h
+++ b/compat/mingw.h
@@ -1,3 +1,5 @@
+#ifndef __COMPAT_MINGW__
+#define __COMPAT_MINGW__
 #ifdef __MINGW64_VERSION_MAJOR
 #include <stdint.h>
 #include <wchar.h>
@@ -95,7 +97,8 @@ struct sigaction {
 #define SA_RESTART 0
 
 struct itimerval {
-	struct timeval it_value, it_interval;
+	struct timeval it_interval;
+	struct timeval it_value;
 };
 #define ITIMER_REAL 0
 
@@ -261,7 +264,9 @@ char *mingw_getenv(const char *name);
 #define getenv mingw_getenv
 int mingw_putenv(const char *namevalue);
 #define putenv mingw_putenv
+#ifndef __MINGW64_VERSION_MAJOR
 #define unsetenv mingw_putenv
+#endif
 
 int mingw_gethostname(char *host, int namelen);
 #define gethostname mingw_gethostname
@@ -334,11 +339,13 @@ static inline int getrlimit(int resource, struct rlimit *rlp)
 #define lseek _lseeki64
 #endif
 
+
 /* use struct stat with 64 bit st_size */
 #ifdef stat
 #undef stat
 #endif
-#define stat _stati64
+#define stat _stat64
+
 int mingw_lstat(const char *file_name, struct stat *buf);
 int mingw_stat(const char *file_name, struct stat *buf);
 int mingw_fstat(int fd, struct stat *buf);
@@ -353,6 +360,7 @@ int mingw_fstat(int fd, struct stat *buf);
 
 #ifndef _stati64
 # define _stati64(x,y) mingw_stat(x,y)
+
 #elif defined (_USE_32BIT_TIME_T)
 # define _stat32i64(x,y) mingw_stat(x,y)
 #else
@@ -557,3 +565,4 @@ static int mingw_main(c,v)
  * Used by Pthread API implementation for Windows
  */
 extern int err_win_to_posix(DWORD winerr);
+#endif /*__COMPAT_MINGW__*/
\ No newline at end of file
diff --git a/config.mak.uname b/config.mak.uname
index adfb90b601..df13cee07d 100644
--- a/config.mak.uname
+++ b/config.mak.uname
@@ -509,7 +509,7 @@ ifneq (,$(findstring MINGW,$(uname_S)))
 	NO_INET_NTOP = YesPlease
 	NO_POSIX_GOODIES = UnfortunatelyYes
 	DEFAULT_HELP_FORMAT = html
-	COMPAT_CFLAGS += -DNOGDI -Icompat -Icompat/win32
+	COMPAT_CFLAGS += -D__USE_MINGW_ACCESS -D_POSIX -DNOGDI -Icompat -Icompat/win32
 	COMPAT_CFLAGS += -DSTRIP_EXTENSION=\".exe\"
 	COMPAT_OBJS += compat/mingw.o compat/winansi.o \
 		compat/win32/pthread.o compat/win32/syslog.o \
diff --git a/configure.ac b/configure.ac
index 2f55237e65..b05cfc8950 100644
--- a/configure.ac
+++ b/configure.ac
@@ -433,7 +433,14 @@ GIT_PARSE_WITH(tcltk))
 #
 
 
-## Checks for programs.
+
+                                   
+AC_LANG_PUSH([C])             
+AC_CHECK_HEADERS([sys/socket.h])  
+AC_CHECK_HEADERS([winsock2.h])    
+AC_CHECK_HEADERS([ws2tcpip.h])    
+AC_LANG_POP([C])                  
+    ## Checks for programs.
 AC_MSG_NOTICE([CHECKS for programs])
 #
 AC_PROG_CC([cc gcc])
@@ -701,14 +708,11 @@ GIT_UNSTASH_FLAGS($ZLIB_PATH)
 
 GIT_CONF_SUBST([NO_DEFLATE_BOUND])
 
-#
-# Define NEEDS_SOCKET if linking with libc is not enough (SunOS,
-# Patrick Mauritz).
-AC_CHECK_LIB([c], [socket],
-[NEEDS_SOCKET=],
-[NEEDS_SOCKET=YesPlease])
-GIT_CONF_SUBST([NEEDS_SOCKET])
-test -n "$NEEDS_SOCKET" && LIBS="$LIBS -lsocket"
+# Find the library needed for
+# the socket function.
+GIT_CHECK_FUNC([socket], [c socket ws2_32],
+[SOCKET_LIB=],
+[SOCKET_LIB=$ac_cv_search_socket])
 
 #
 # The next few tests will define NEEDS_RESOLV if linking with
@@ -757,11 +761,9 @@ GIT_CONF_SUBST([NEEDS_RESOLV])
 # build-time, also set it here for remaining configure-time checks.
 test -n "$NEEDS_RESOLV" && LIBS="$LIBS -lresolv"
 
-AC_CHECK_LIB([c], [basename],
-[NEEDS_LIBGEN=],
-[NEEDS_LIBGEN=YesPlease])
-GIT_CONF_SUBST([NEEDS_LIBGEN])
-test -n "$NEEDS_LIBGEN" && LIBS="$LIBS -lgen"
+GIT_CHECK_FUNC([basename], [c gen],
+[BASENAME_LIB=],
+[BASENAME_LIB=$ac_cv_search_basename])
 
 AC_CHECK_LIB([c], [gettext],
 [LIBC_CONTAINS_LIBINTL=YesPlease],
@@ -877,7 +879,12 @@ AC_CHECK_TYPE(struct sockaddr_storage,
 [NO_SOCKADDR_STORAGE=],
 [NO_SOCKADDR_STORAGE=YesPlease],[
 #include <sys/types.h>
-#include <sys/socket.h>
+#ifdef HAVE_SYS_SOCKET_H
+ #include <sys/socket.h>
+#endif
+#ifdef HAVE_WINSOCK2_H
+#include <winsock2.h>
+#endif
 ])
 GIT_CONF_SUBST([NO_SOCKADDR_STORAGE])
 #
@@ -887,9 +894,14 @@ AC_CHECK_TYPE([struct addrinfo],[
   [NO_IPV6=],
   [NO_IPV6=YesPlease])
 ],[NO_IPV6=YesPlease],[
-#include <sys/types.h>
-#include <sys/socket.h>
-#include <netdb.h>
+ #include <sys/types.h>
+#ifdef HAVE_SYS_SOCKET_H
+ #include <sys/socket.h>
+#endif
+#ifdef HAVE_WINSOCK2_H
+#include <winsock2.h>
+#endif
+ #include <netdb.h>
 ])
 GIT_CONF_SUBST([NO_IPV6])
 #
diff --git a/exec_cmd.c b/exec_cmd.c
index fb94aeba9c..abfaf50673 100644
--- a/exec_cmd.c
+++ b/exec_cmd.c
@@ -100,7 +100,7 @@ void setup_path(void)
 		strbuf_addstr(&new_path, _PATH_DEFPATH);
 
 	setenv("PATH", new_path.buf, 1);
-
+trace_printf("path %s\n", new_path.buf);
 	strbuf_release(&new_path);
 }
 
diff --git a/git-compat-util.h b/git-compat-util.h
index 047172d173..d5f306aa15 100644
--- a/git-compat-util.h
+++ b/git-compat-util.h
@@ -245,14 +245,14 @@ typedef unsigned long uintptr_t;
 extern int compat_mkdir_wo_trailing_slash(const char*, mode_t);
 #endif
 
-#ifdef NO_STRUCT_ITIMERVAL
+#if !defined( NO_STRUCT_ITIMERVAL) && !defined(__MINGW64_VERSION_MAJOR)
 struct itimerval {
 	struct timeval it_interval;
 	struct timeval it_value;
 };
 #endif
 
-#ifdef NO_SETITIMER
+#if !defined(NO_SETITIMER) && !defined(__MINGW64_VERSION_MAJOR)
 #define setitimer(which,value,ovalue)
 #endif
 
@@ -602,6 +602,8 @@ extern int git_munmap(void *start, size_t length);
 #define S_IFCHR  0020000
 #define S_IFIFO  0010000
 #define S_IFSOCK 0140000
+
+#ifndef __MINGW64_VERSION_MAJOR
 #ifdef stat
 #undef stat
 #endif
@@ -618,6 +620,7 @@ extern int git_fstat(int, struct stat *);
 #define lstat(path, buf) git_lstat(path, buf)
 extern int git_lstat(const char *, struct stat *);
 #endif
+#endif
 
 #define DEFAULT_PACKED_GIT_LIMIT \
 	((1024L * 1024L) * (size_t)(sizeof(void*) >= 8 ? (32 * 1024L * 1024L) : 256))
